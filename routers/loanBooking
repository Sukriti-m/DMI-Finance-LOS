const express = require('express');
const router = express.Router();
const LoanBooking = require('../models/loan');
const User = require('../models/user');

// Route to create a new loan booking
router.post('/create', async (req, res) => {
  try {
    const { borrowerId, loanType, loanAmount, interestRate, tenure } = req.body;

    const borrower = await User.findById(borrowerId);
    if (!borrower) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Ensure that tenure is not zero to avoid division by zero
    if (tenure <= 0) {
      return res.status(400).json({ message: 'Tenure must be greater than zero' });
    }

    let emi = loanAmount / tenure; // Simplified EMI calculation

    // Create a new loan booking
    const newLoan = new LoanBooking({
      borrower: borrowerId,
      loanDetails: {
        loanType: loanType,
        loanAmount: loanAmount,
        interestRate: interestRate,
        tenure: tenure,
        loanStatus: 'Pending', // Default status is Pending
      },
      repaymentDetails: {
        emiAmount: emi, // Simplified EMI calculation
        totalOutstanding: loanAmount,
      },
    });

    // Save the loan booking and handle potential validation errors
    await newLoan.save().catch(err => {
      console.error('Save error:', err);
      return res.status(400).json({ message: 'Validation error', error: err });
    });

    res.status(201).json({ message: 'Loan booking created successfully', loan: newLoan });
  } catch (error) {
    console.error('Server error:', error);
    res.status(500).json({ message: 'Server error', error });
  }
});

// Route to fetch all loan bookings
router.get('/', async (req, res) => {
  try {
    const loans = await LoanBooking.find().populate('borrower');
    res.status(200).json(loans);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
});

// Route to fetch a single loan booking by ID
router.get('/:id', async (req, res) => {
  try {
    const loan = await LoanBooking.findById(req.params.id).populate('borrower');
    if (!loan) {
      return res.status(404).json({ message: 'Loan not found' });
    }
    res.status(200).json(loan);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
});

// Route to update a loan status
router.put('/:id/update', async (req, res) => {
  try {
    const loan = await LoanBooking.findById(req.params.id);
    if (!loan) {
      return res.status(404).json({ message: 'Loan not found' });
    }

    const { loanStatus } = req.body;
    loan.loanDetails.loanStatus = loanStatus;
    await loan.save();

    res.status(200).json({ message: 'Loan status updated', loan });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
});

// Route to delete a loan booking
router.delete('/:id/delete', async (req, res) => {
  try {
    const loan = await LoanBooking.findByIdAndDelete(req.params.id);
    if (!loan) {
      return res.status(404).json({ message: 'Loan not found' });
    }

    res.status(200).json({ message: 'Loan booking deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
});

module.exports = router;
